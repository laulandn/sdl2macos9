PATH_TO_RETRO68=$(HOME)/Retro68-buld/toolchain/powerpc-apple-macos

.SUFFIXES:	.xcoff

CC=powerpc-apple-macos-gcc

INCPATH+= -I"../include"

LIBPATH = -L..
LIBS    = -lSDL2_test -lSDL2 -lm

RINC=$(PATH_TO_RETRO68)/RIncludes
#RES=$(RINC)/Retro68APPL.r
RES=$(RINC)/RetroPPCAPPL.r

#CFLAGS+= -DHAVE_SDL_TTF
#TTFLIBS = SDL2ttf.lib

CFLAGS+= $(INCPATH) -D__MACOSCLASSIC__

TARGETS = testatomic.xcoff testdisplayinfo.xcoff testbounds.xcoff testdraw2.xcoff \
          testdrawchessboard.xcoff testdropfile.xcoff testerror.xcoff testfile.xcoff \
          testfilesystem.xcoff testgamecontroller.xcoff testgeometry.xcoff testgesture.xcoff \
          testhittesting.xcoff testhotplug.xcoff testiconv.xcoff testime.xcoff testlocale.xcoff \
          testintersections.xcoff testjoystick.xcoff testkeys.xcoff testloadso.xcoff \
          testlock.xcoff testmessage.xcoff testoverlay2.xcoff testplatform.xcoff \
          testpower.xcoff testsensor.xcoff testrelative.xcoff testrendercopyex.xcoff \
          testrendertarget.xcoff testrumble.xcoff testscale.xcoff testsem.xcoff \
          testshader.xcoff testshape.xcoff testsprite2.xcoff testspriteminimal.xcoff \
          teststreaming.xcoff testthread.xcoff testtimer.xcoff testver.xcoff \
          testviewport.xcoff testwm2.xcoff torturethread.xcoff checkkeys.xcoff \
          checkkeysthreads.xcoff testmouse.xcoff testgles.xcoff testgles2.xcoff \
          controllermap.xcoff testhaptic.xcoff testqsort.xcoff testresample.xcoff \
          testaudioinfo.xcoff testaudiocapture.xcoff loopwave.xcoff loopwavequeue.xcoff \
          testsurround.xcoff testyuv.xcoff testgl2.xcoff testvulkan.xcoff testnative.xcoff \
          testautomation.xcoff testaudiohotplug.xcoff testcustomcursor.xcoff testmultiaudio.xcoff \
          testoffscreen.xcoff testurl.xcoff

noninteractive = \
	testatomic.xcoff \
	testerror.xcoff \
	testfilesystem.xcoff \
	testkeys.xcoff \
	testlocale.xcoff \
	testplatform.xcoff \
	testpower.xcoff \
	testqsort.xcoff \
	testthread.xcoff \
	testtimer.xcoff \
	testver.xcoff

needs_audio = \
	testaudioinfo.xcoff \
	testsurround.xcoff

needs_display = \
	testbounds.xcoff \
	testdisplayinfo.xcoff

TESTS = $(noninteractive) $(needs_audio) $(needs_display)

# testautomation sources
TASRCS = testautomation.c \
	testautomation_audio.c testautomation_clipboard.c \
	testautomation_events.c testautomation_guid.c \
	testautomation_hints.c testautomation_joystick.c \
	testautomation_keyboard.c testautomation_log.c \
	testautomation_main.c testautomation_math.c \
	testautomation_mouse.c testautomation_pixels.c \
	testautomation_platform.c testautomation_rect.c \
	testautomation_render.c testautomation_rwops.c \
	testautomation_sdltest.c testautomation_stdlib.c \
	testautomation_subsystems.c testautomation_surface.c \
	testautomation_syswm.c testautomation_timer.c \
	testautomation_video.c

OBJS = $(TARGETS:.xcoff=.o)
COBJS = $(CSRCS:.c=.o)
TAOBJS = $(TASRCS:.c=.o)
TNOBJS = $(TNSRCS:.c=.o)


all: testutils.lib $(TARGETS)


.o.xcoff:
	$(CC) -o $@ $< testutils.o $(LIBPATH) $(LIBS)
	MakePEF -o $*.pef $@
	Rez -I$(RINC) $(RES) --data $*.pef -t "APPL" -c "????" -o $*.bin --cc $*.APPL --cc $*.dsk


%.o : %.c
	@echo Compiling $<
	@$(CC) -o $@ -c $< $(CFLAGS)


# specials
testvulkan.o: testvulkan.c
  # new vulkan headers result in lots of W202 warnings
	 $(CFLAGS) -wcd=202 -fo=$^@ $<

testautomation_stdlib.o: testautomation_stdlib.c
	 $(CFLAGS) -wcd=201 -fo=$^@ $<

testautomation.xcoff: $(TAOBJS)
	 $(CC) $(LIBPATH) lib {$(LIBS)} op q op el file {$<} name $@

testnative.xcoff: $(TNOBJS)
	 $(CC) $(LIBPATH) lib {$(LIBS)} op q op el file {$<} name $@

testoverlay2.xcoff: testoverlay2.o testyuv_cvt.o
	 $(CC) $(LIBPATH) lib {$(LIBS)} op q op el file {$<} name $@

testyuv.xcoff: testyuv.o testyuv_cvt.o
	 $(CC) $(LIBPATH) lib {$(LIBS)} op q op el file {$<} name $@

testshader.xcoff: testshader.o
	 $(CC) $(LIBPATH) lib {$(LIBS) $(GLLIBS)} op q op el file {$<} name $@

testime.xcoff: testime.o
	 $(CC) $(LIBPATH) lib {$(LIBS) $(TTFLIBS)} op q op el file {$<} name $@

testutils.lib: testutils.o
#  wlib -q -b -n -c -pa -s -t -zld -ii -io $@ $<

check: .SYMBOLIC $(TESTS)
#  @set SDL_AUDIODRIVER=dummy
#  @set SDL_VIDEODRIVER=dummy
#  @copy ..\SDL2.dll .
#  @for .xcoff in ($(TESTS)) do .xcoff

check-quick: .SYMBOLIC $(TESTS)
#  @set SDL_TESTS_QUICK=1
#  @set SDL_AUDIODRIVER=dummy
#  @set SDL_VIDEODRIVER=dummy
#  @copy ..\SDL2.dll .
#  @for .xcoff in ($(TESTS)) do .xcoff

clean:
	rm -f *.o *.err *.xcoff *.pef *.dsk *.bin *.APPL *.gdb
distclean: clean
	rm -f *.xcoff *.lib
